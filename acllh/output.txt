------     testcase/PatternMatch.c     ------

[   1]macro:              #include "PatternMatch.h"
[   2]macro:              #include "ImgUtility.h"
[   3]macro:              #include "ImgProc.h"
[   4]macro:              #include "Motor.h"
[   5]macro:              #include "stdio.h"
[   6]macro:              #include "uart.h"
[   7]macro:              #include "gpio.h"
[  13]identifier:         int32_t
[  13]identifier:         ringDistance
[  13]delimiter:          ;
[  14]reserved word(33):  bool
[  14]identifier:         inRing
[  14]delimiter:          ;
[  15]reserved word(33):  bool
[  15]identifier:         ringEndDelay
[  15]delimiter:          ;
[  17]identifier:         int16_t
[  17]identifier:         barrierType
[  17]delimiter:          ;
[  18]identifier:         int32_t
[  18]identifier:         barrierDistance
[  18]delimiter:          ;
[  19]reserved word(33):  bool
[  19]identifier:         aroundBarrier
[  19]delimiter:          ;
[  21]reserved word(23):  static
[  21]reserved word(33):  bool
[  21]identifier:         IsRing
[  21]operator(40):       (
[  21]reserved word(29):  void
[  21]operator(41):       )
[  21]delimiter:          ;
[  22]reserved word(23):  static
[  22]reserved word(33):  bool
[  22]identifier:         IsRingEnd
[  22]operator(40):       (
[  22]reserved word(29):  void
[  22]operator(41):       )
[  22]delimiter:          ;
[  23]reserved word(23):  static
[  23]identifier:         int16_t
[  23]identifier:         WhichCurve
[  23]operator(40):       (
[  23]reserved word(29):  void
[  23]operator(41):       )
[  23]delimiter:          ;
[  24]reserved word(23):  static
[  24]reserved word(33):  bool
[  24]identifier:         IsCrossRoad
[  24]operator(40):       (
[  24]reserved word(29):  void
[  24]operator(41):       )
[  24]delimiter:          ;
[  25]reserved word(23):  static
[  25]identifier:         int16_t
[  25]identifier:         WhichBarrier
[  25]operator(40):       (
[  25]reserved word(29):  void
[  25]operator(41):       )
[  25]delimiter:          ;
[  26]reserved word(23):  static
[  26]identifier:         int16_t
[  26]identifier:         CrossRoadCompensateOneSide
[  26]operator(40):       (
[  26]identifier:         int16_t
[  26]identifier:         borders
[  26]delimiter:          [
[  26]identifier:         IMG_ROW
[  26]delimiter:          ]
[  26]delimiter:          ,
[  26]identifier:         int16_t
[  26]identifier:         slopes
[  26]delimiter:          [
[  26]identifier:         IMG_ROW
[  26]delimiter:          ]
[  26]delimiter:          ,
[  26]identifier:         int16_t
[  26]identifier:         zeros
[  26]delimiter:          [
[  26]identifier:         IMG_ROW
[  26]delimiter:          ]
[  26]operator(41):       )
[  26]delimiter:          ;
[  28]reserved word(23):  static
[  28]reserved word(32):  inline
[  28]reserved word(12):  float
[  28]identifier:         Abs
[  28]operator(40):       (
[  28]reserved word(12):  float
[  28]operator(41):       )
[  28]delimiter:          ;
[  29]reserved word(23):  static
[  29]reserved word(32):  inline
[  29]reserved word(12):  float
[  29]identifier:         Min
[  29]operator(40):       (
[  29]reserved word(12):  float
[  29]delimiter:          ,
[  29]reserved word(12):  float
[  29]operator(41):       )
[  29]delimiter:          ;
[  30]reserved word(23):  static
[  30]reserved word(32):  inline
[  30]reserved word(12):  float
[  30]identifier:         Max
[  30]operator(40):       (
[  30]reserved word(12):  float
[  30]delimiter:          ,
[  30]reserved word(12):  float
[  30]operator(41):       )
[  30]delimiter:          ;
[  31]reserved word(23):  static
[  31]reserved word(32):  inline
[  31]reserved word(33):  bool
[  31]identifier:         OpstSign
[  31]operator(40):       (
[  31]identifier:         int16_t
[  31]delimiter:          ,
[  31]identifier:         int16_t
[  31]operator(41):       )
[  31]delimiter:          ;
[  32]reserved word(23):  static
[  32]reserved word(32):  inline
[  32]reserved word(33):  bool
[  32]identifier:         InRange
[  32]operator(40):       (
[  32]identifier:         int16_t
[  32]identifier:         value
[  32]delimiter:          ,
[  32]identifier:         int16_t
[  32]identifier:         lbound
[  32]delimiter:          ,
[  32]identifier:         int16_t
[  32]identifier:         hbound
[  32]operator(41):       )
[  32]delimiter:          ;
[  34]reserved word(23):  static
[  34]identifier:         int16_t
[  34]identifier:         black_pt_row
[  34]delimiter:          ;
[  35]reserved word(23):  static
[  35]identifier:         int16_t
[  35]identifier:         last_not_found_border_row
[  35]delimiter:          ;
[  37]reserved word(33):  bool
[  37]identifier:         OutOfRoadJudge
[  37]operator(40):       (
[  37]operator(41):       )
[  37]delimiter:          {
[  38]identifier:         int16_t
[  38]identifier:         cnt
[  38]operator(61):       =
[  38]constant:           0
[  38]delimiter:          ;
[  39]identifier:         int16_t
[  39]identifier:         line
[  39]operator(61):       =
[  39]constant:           0
[  39]delimiter:          ;
[  40]reserved word(13):  for
[  40]operator(40):       (
[  40]identifier:         int16_t
[  40]identifier:         row
[  40]operator(61):       =
[  40]constant:           0
[  40]delimiter:          ;
[  40]identifier:         row
[  40]operator(60):       <
[  40]constant:           10
[  40]delimiter:          ;
[  40]operator(86):       ++
[  40]identifier:         row
[  40]operator(41):       )
[  40]delimiter:          {
[  41]reserved word(13):  for
[  41]operator(40):       (
[  41]identifier:         int16_t
[  41]identifier:         col
[  41]operator(61):       =
[  41]constant:           60
[  41]delimiter:          ;
[  41]identifier:         col
[  41]operator(60):       <
[  41]identifier:         IMG_COL
[  41]operator(45):       -
[  41]constant:           60
[  41]delimiter:          ;
[  41]operator(86):       ++
[  41]identifier:         col
[  41]operator(41):       )
[  41]delimiter:          {
[  42]reserved word(15):  if
[  42]operator(40):       (
[  42]identifier:         IsBlack
[  42]operator(40):       (
[  42]identifier:         row
[  42]delimiter:          ,
[  42]identifier:         col
[  42]operator(41):       )
[  42]operator(41):       )
[  42]delimiter:          {
[  43]operator(86):       ++
[  43]identifier:         cnt
[  43]delimiter:          ;
[  44]delimiter:          }
[  45]delimiter:          }
[  46]reserved word(15):  if
[  46]operator(40):       (
[  46]identifier:         cnt
[  46]operator(123):       >=
[  46]constant:           85
[  46]operator(41):       )
[  46]delimiter:          {
[  47]operator(86):       ++
[  47]identifier:         line
[  47]delimiter:          ;
[  48]reserved word(15):  if
[  48]operator(40):       (
[  48]identifier:         line
[  48]operator(123):       >=
[  48]constant:           4
[  48]operator(41):       )
[  48]delimiter:          {
[  49]reserved word(19):  return
[  49]constant:           true
[  49]delimiter:          ;
[  50]delimiter:          }
[  51]delimiter:          }
[  52]identifier:         cnt
[  52]operator(61):       =
[  52]constant:           0
[  52]delimiter:          ;
[  53]delimiter:          }
[  54]reserved word(19):  return
[  54]constant:           false
[  54]delimiter:          ;
[  55]delimiter:          }
[  57]identifier:         int16_t
[  57]identifier:         GetRoadType
[  57]operator(40):       (
[  57]operator(41):       )
[  57]delimiter:          {
[  58]comment:            // de-warning
[  59]identifier:         Min
[  59]operator(40):       (
[  59]constant:           0
[  59]delimiter:          ,
[  59]constant:           0
[  59]operator(41):       )
[  59]delimiter:          ;
[  61]reserved word(15):  if
[  61]operator(40):       (
[  61]identifier:         ringEndDelay
[  61]operator(41):       )
[  61]delimiter:          {
[  62]reserved word(15):  if
[  62]operator(40):       (
[  62]identifier:         ringDistance
[  62]operator(60):       <
[  62]constant:           10000
[  62]operator(41):       )
[  62]delimiter:          {
[  63]reserved word(19):  return
[  63]identifier:         RingEnd
[  63]delimiter:          ;
[  64]delimiter:          }
[  64]reserved word( 9):  else
[  64]delimiter:          {
[  65]identifier:         ringDistance
[  65]operator(61):       =
[  65]constant:           0
[  65]delimiter:          ;
[  66]identifier:         ringEndDelay
[  66]operator(61):       =
[  66]constant:           false
[  66]delimiter:          ;
[  67]delimiter:          }
[  68]delimiter:          }
[  68]reserved word( 9):  else
[  68]reserved word(15):  if
[  68]operator(40):       (
[  68]identifier:         inRing
[  68]operator(41):       )
[  68]delimiter:          {
[  69]reserved word(15):  if
[  69]operator(40):       (
[  69]identifier:         ringDistance
[  69]operator(62):       >
[  69]constant:           200000
[  69]identifier:         L
[  69]operator(41):       )
[  69]delimiter:          {
[  70]identifier:         ringDistance
[  70]operator(61):       =
[  70]constant:           0
[  70]delimiter:          ;
[  71]identifier:         inRing
[  71]operator(61):       =
[  71]constant:           false
[  71]delimiter:          ;
[  72]delimiter:          }
[  72]reserved word( 9):  else
[  72]reserved word(15):  if
[  72]operator(40):       (
[  72]identifier:         ringDistance
[  72]operator(62):       >
[  72]constant:           25000
[  72]operator(76):       &&
[  72]identifier:         IsRingEnd
[  72]operator(40):       (
[  72]operator(41):       )
[  72]operator(41):       )
[  72]delimiter:          {
[  73]identifier:         ringDistance
[  73]operator(61):       =
[  73]constant:           0
[  73]delimiter:          ;
[  74]identifier:         ringEndDelay
[  74]operator(61):       =
[  74]constant:           true
[  74]delimiter:          ;
[  75]identifier:         inRing
[  75]operator(61):       =
[  75]constant:           false
[  75]delimiter:          ;
[  76]reserved word(19):  return
[  76]identifier:         RingEnd
[  76]delimiter:          ;
[  77]delimiter:          }
[  78]delimiter:          }
[  78]reserved word( 9):  else
[  78]reserved word(15):  if
[  78]operator(40):       (
[  78]identifier:         aroundBarrier
[  78]operator(41):       )
[  78]delimiter:          {
[  79]reserved word(15):  if
[  79]operator(40):       (
[  79]identifier:         barrierDistance
[  79]operator(62):       >
[  79]constant:           5000
[  79]operator(41):       )
[  79]delimiter:          {
[  80]identifier:         barrierDistance
[  80]operator(61):       =
[  80]constant:           0
[  80]delimiter:          ;
[  81]identifier:         aroundBarrier
[  81]operator(61):       =
[  81]constant:           false
[  81]delimiter:          ;
[  82]delimiter:          }
[  82]reserved word( 9):  else
[  82]delimiter:          {
[  83]reserved word(19):  return
[  83]identifier:         barrierType
[  83]delimiter:          ;
[  84]delimiter:          }
[  85]delimiter:          }
[  87]identifier:         int16_t
[  87]identifier:         curve
[  87]operator(61):       =
[  87]identifier:         WhichCurve
[  87]operator(40):       (
[  87]operator(41):       )
[  87]delimiter:          ;
[  88]reserved word(15):  if
[  88]operator(40):       (
[  88]identifier:         curve
[  88]operator(122):       ==
[  88]identifier:         Unknown
[  88]operator(41):       )
[  88]delimiter:          {
[  89]identifier:         int16_t
[  89]identifier:         cnt
[  89]operator(61):       =
[  89]constant:           0
[  89]delimiter:          ;
[  90]identifier:         int16_t
[  90]identifier:         row
[  90]delimiter:          ;
[  91]reserved word(13):  for
[  91]operator(40):       (
[  91]identifier:         row
[  91]operator(61):       =
[  91]constant:           5
[  91]delimiter:          ;
[  91]identifier:         row
[  91]operator(60):       <
[  91]identifier:         IMG_ROW
[  91]delimiter:          ;
[  91]operator(86):       ++
[  91]identifier:         row
[  91]operator(41):       )
[  91]delimiter:          {
[  92]reserved word(15):  if
[  92]operator(40):       (
[  92]operator(40):       (
[  92]identifier:         resultSet
[  92]operator(46):       .
[  92]identifier:         rightBorder
[  92]delimiter:          [
[  92]identifier:         row
[  92]delimiter:          ]
[  92]operator(45):       -
[  92]identifier:         resultSet
[  92]operator(46):       .
[  92]identifier:         leftBorder
[  92]delimiter:          [
[  92]identifier:         row
[  92]delimiter:          ]
[  92]operator(41):       )
[  93]operator(45):       -
[  93]operator(40):       (
[  93]identifier:         resultSet
[  93]operator(46):       .
[  93]identifier:         rightBorder
[  93]delimiter:          [
[  93]identifier:         row
[  93]operator(45):       -
[  93]constant:           5
[  93]delimiter:          ]
[  93]operator(45):       -
[  93]identifier:         resultSet
[  93]operator(46):       .
[  93]identifier:         leftBorder
[  93]delimiter:          [
[  93]identifier:         row
[  93]operator(45):       -
[  93]constant:           5
[  93]delimiter:          ]
[  93]operator(41):       )
[  93]operator(62):       >
[  93]constant:           6
[  94]operator(76):       &&
[  94]identifier:         resultSet
[  94]operator(46):       .
[  94]identifier:         rightBorder
[  94]delimiter:          [
[  94]identifier:         row
[  94]delimiter:          ]
[  94]operator(45):       -
[  94]identifier:         resultSet
[  94]operator(46):       .
[  94]identifier:         leftBorder
[  94]delimiter:          [
[  94]identifier:         row
[  94]delimiter:          ]
[  94]operator(62):       >
[  94]constant:           140
[  94]operator(41):       )
[  94]delimiter:          {
[  95]operator(86):       ++
[  95]identifier:         cnt
[  95]delimiter:          ;
[  96]delimiter:          }
[  97]reserved word(15):  if
[  97]operator(40):       (
[  97]identifier:         cnt
[  97]operator(62):       >
[  97]constant:           3
[  97]operator(41):       )
[  97]delimiter:          {
[  98]reserved word( 1):  break
[  98]delimiter:          ;
[  99]delimiter:          }
[ 100]delimiter:          }
[ 101]reserved word(15):  if
[ 101]operator(40):       (
[ 101]identifier:         row
[ 101]operator(122):       ==
[ 101]identifier:         IMG_ROW
[ 101]operator(41):       )
[ 101]delimiter:          {
[ 102]reserved word(19):  return
[ 102]identifier:         MAYBE_BARRIER
[ 102]delimiter:          ;
[ 103]delimiter:          }
[ 104]reserved word(33):  bool
[ 104]identifier:         hasLeftInflx
[ 104]operator(61):       =
[ 104]constant:           false
[ 104]delimiter:          ,
[ 104]identifier:         hasRightInflx
[ 104]operator(61):       =
[ 104]constant:           false
[ 104]delimiter:          ;
[ 105]identifier:         int16_t
[ 105]identifier:         _row
[ 105]operator(61):       =
[ 105]identifier:         row
[ 105]delimiter:          ;
[ 106]reserved word(13):  for
[ 106]operator(40):       (
[ 106]delimiter:          ;
[ 106]identifier:         row
[ 106]operator(123):       >=
[ 106]identifier:         _row
[ 106]operator(45):       -
[ 106]constant:           10
[ 106]delimiter:          ;
[ 106]operator(90):       --
[ 106]identifier:         row
[ 106]operator(41):       )
[ 106]delimiter:          {
[ 107]reserved word(15):  if
[ 107]operator(40):       (
[ 107]identifier:         OpstSign
[ 107]operator(40):       (
[ 107]identifier:         resultSet
[ 107]operator(46):       .
[ 107]identifier:         leftTrend
[ 107]delimiter:          [
[ 107]identifier:         row
[ 107]delimiter:          ]
[ 107]delimiter:          ,
[ 107]identifier:         resultSet
[ 107]operator(46):       .
[ 107]identifier:         leftTrend
[ 107]delimiter:          [
[ 107]identifier:         row
[ 107]operator(45):       -
[ 107]constant:           2
[ 107]delimiter:          ]
[ 107]operator(41):       )
[ 107]operator(41):       )
[ 107]delimiter:          {
[ 108]identifier:         hasLeftInflx
[ 108]operator(61):       =
[ 108]constant:           true
[ 108]delimiter:          ;
[ 109]delimiter:          }
[ 110]reserved word(15):  if
[ 110]operator(40):       (
[ 110]identifier:         OpstSign
[ 110]operator(40):       (
[ 110]identifier:         resultSet
[ 110]operator(46):       .
[ 110]identifier:         rightTrend
[ 110]delimiter:          [
[ 110]identifier:         row
[ 110]delimiter:          ]
[ 110]delimiter:          ,
[ 110]identifier:         resultSet
[ 110]operator(46):       .
[ 110]identifier:         rightTrend
[ 110]delimiter:          [
[ 110]identifier:         row
[ 110]operator(45):       -
[ 110]constant:           2
[ 110]delimiter:          ]
[ 110]operator(41):       )
[ 110]operator(41):       )
[ 110]delimiter:          {
[ 111]identifier:         hasRightInflx
[ 111]operator(61):       =
[ 111]constant:           true
[ 111]delimiter:          ;
[ 112]delimiter:          }
[ 113]reserved word(15):  if
[ 113]operator(40):       (
[ 113]identifier:         hasLeftInflx
[ 113]operator(76):       &&
[ 113]identifier:         hasRightInflx
[ 113]operator(41):       )
[ 113]delimiter:          {
[ 114]reserved word(19):  return
[ 114]identifier:         IsRing
[ 114]operator(40):       (
[ 114]operator(41):       )
[ 114]operator(63):       ?
[ 114]identifier:         Ring
[ 114]operator(58):       :
[ 114]identifier:         IsCrossRoad
[ 114]operator(40):       (
[ 114]operator(41):       )
[ 114]operator(63):       ?
[ 114]identifier:         CrossRoad
[ 114]operator(58):       :
[ 114]identifier:         MAYBE_BARRIER
[ 114]delimiter:          ;
[ 115]delimiter:          }
[ 116]delimiter:          }
[ 117]reserved word(19):  return
[ 117]identifier:         MAYBE_BARRIER
[ 117]delimiter:          ;
[ 118]delimiter:          }
[ 118]reserved word( 9):  else
[ 118]delimiter:          {
[ 119]reserved word(19):  return
[ 119]identifier:         curve
[ 119]delimiter:          ;
[ 120]delimiter:          }
[ 121]delimiter:          }
[ 123]reserved word(33):  bool
[ 123]identifier:         IsRing
[ 123]operator(40):       (
[ 123]operator(41):       )
[ 123]delimiter:          {
[ 124]identifier:         int16_t
[ 124]identifier:         blackBlockRowsCnt
[ 124]operator(61):       =
[ 124]constant:           0
[ 124]delimiter:          ;
[ 125]identifier:         int16_t
[ 125]identifier:         col
[ 125]delimiter:          ;
[ 126]identifier:         int16_t
[ 126]identifier:         whiteCol
[ 126]delimiter:          ;
[ 127]identifier:         int16_t
[ 127]identifier:         width
[ 127]delimiter:          ;
[ 128]reserved word(13):  for
[ 128]operator(40):       (
[ 128]identifier:         int16_t
[ 128]identifier:         row
[ 128]operator(61):       =
[ 128]identifier:         IMG_ROW
[ 128]operator(45):       -
[ 128]constant:           1
[ 128]delimiter:          ;
[ 128]identifier:         row
[ 128]operator(123):       >=
[ 128]constant:           30
[ 128]delimiter:          ;
[ 128]operator(90):       --
[ 128]identifier:         row
[ 128]operator(41):       )
[ 129]delimiter:          {
[ 130]reserved word(15):  if
[ 130]operator(40):       (
[ 130]identifier:         IsWhite
[ 130]operator(40):       (
[ 130]identifier:         row
[ 130]delimiter:          ,
[ 130]identifier:         IMG_COL
[ 130]operator(47):       /
[ 130]constant:           2
[ 130]operator(41):       )
[ 130]operator(41):       )
[ 131]delimiter:          {
[ 132]reserved word( 5):  continue
[ 132]delimiter:          ;
[ 133]delimiter:          }
[ 134]reserved word(13):  for
[ 134]operator(40):       (
[ 134]identifier:         col
[ 134]operator(61):       =
[ 134]identifier:         IMG_COL
[ 134]operator(47):       /
[ 134]constant:           2
[ 134]operator(45):       -
[ 134]constant:           1
[ 134]delimiter:          ;
[ 134]identifier:         IsBlack
[ 134]operator(40):       (
[ 134]identifier:         row
[ 134]delimiter:          ,
[ 134]identifier:         col
[ 134]operator(41):       )
[ 134]operator(76):       &&
[ 134]identifier:         col
[ 134]operator(123):       >=
[ 134]constant:           0
[ 134]delimiter:          ;
[ 134]operator(90):       --
[ 134]identifier:         col
[ 134]operator(41):       )
[ 134]delimiter:          {
[ 134]delimiter:          }
[ 135]reserved word(15):  if
[ 135]operator(40):       (
[ 135]identifier:         col
[ 135]operator(122):       ==
[ 135]operator(45):       -
[ 135]constant:           1
[ 135]operator(248):       ||
[ 135]identifier:         col
[ 135]operator(123):       >=
[ 135]identifier:         IMG_COL
[ 135]operator(47):       /
[ 135]constant:           2
[ 135]operator(45):       -
[ 135]constant:           5
[ 135]operator(41):       )
[ 136]delimiter:          {
[ 137]reserved word( 5):  continue
[ 137]delimiter:          ;
[ 138]delimiter:          }
[ 139]reserved word(13):  for
[ 139]operator(40):       (
[ 139]identifier:         whiteCol
[ 139]operator(61):       =
[ 139]identifier:         col
[ 139]delimiter:          ;
[ 139]identifier:         IsWhite
[ 139]operator(40):       (
[ 139]identifier:         row
[ 139]delimiter:          ,
[ 139]identifier:         whiteCol
[ 139]operator(41):       )
[ 139]operator(76):       &&
[ 139]identifier:         whiteCol
[ 139]operator(123):       >=
[ 139]constant:           0
[ 139]delimiter:          ;
[ 139]operator(90):       --
[ 139]identifier:         whiteCol
[ 139]operator(41):       )
[ 139]delimiter:          {
[ 139]delimiter:          }
[ 140]identifier:         width
[ 140]operator(61):       =
[ 140]identifier:         col
[ 140]operator(45):       -
[ 140]identifier:         whiteCol
[ 140]delimiter:          ;
[ 141]reserved word(13):  for
[ 141]operator(40):       (
[ 141]identifier:         col
[ 141]operator(61):       =
[ 141]identifier:         IMG_COL
[ 141]operator(47):       /
[ 141]constant:           2
[ 141]operator(43):       +
[ 141]constant:           1
[ 141]delimiter:          ;
[ 141]identifier:         IsBlack
[ 141]operator(40):       (
[ 141]identifier:         row
[ 141]delimiter:          ,
[ 141]identifier:         col
[ 141]operator(41):       )
[ 141]operator(76):       &&
[ 141]identifier:         col
[ 141]operator(60):       <
[ 141]identifier:         IMG_COL
[ 141]delimiter:          ;
[ 141]operator(86):       ++
[ 141]identifier:         col
[ 141]operator(41):       )
[ 141]delimiter:          {
[ 141]delimiter:          }
[ 142]reserved word(15):  if
[ 142]operator(40):       (
[ 142]identifier:         InRange
[ 142]operator(40):       (
[ 142]identifier:         col
[ 142]delimiter:          ,
[ 142]identifier:         IMG_COL
[ 142]operator(47):       /
[ 142]constant:           2
[ 142]operator(43):       +
[ 142]constant:           4
[ 142]delimiter:          ,
[ 142]identifier:         IMG_COL
[ 142]operator(41):       )
[ 142]operator(41):       )
[ 143]delimiter:          {
[ 144]reserved word(13):  for
[ 144]operator(40):       (
[ 144]identifier:         whiteCol
[ 144]operator(61):       =
[ 144]identifier:         col
[ 144]delimiter:          ;
[ 144]identifier:         IsWhite
[ 144]operator(40):       (
[ 144]identifier:         row
[ 144]delimiter:          ,
[ 144]identifier:         whiteCol
[ 144]operator(41):       )
[ 144]operator(76):       &&
[ 144]identifier:         whiteCol
[ 144]operator(60):       <
[ 144]identifier:         IMG_COL
[ 144]delimiter:          ;
[ 144]operator(86):       ++
[ 144]identifier:         whiteCol
[ 144]operator(41):       )
[ 144]delimiter:          {
[ 144]delimiter:          }
[ 145]reserved word(15):  if
[ 145]operator(40):       (
[ 145]identifier:         Abs
[ 145]operator(40):       (
[ 145]operator(40):       (
[ 145]identifier:         whiteCol
[ 145]operator(45):       -
[ 145]identifier:         col
[ 145]operator(41):       )
[ 145]operator(45):       -
[ 145]identifier:         width
[ 145]operator(41):       )
[ 145]operator(60):       <
[ 145]constant:           30
[ 145]operator(41):       )
[ 145]delimiter:          {
[ 146]operator(86):       ++
[ 146]identifier:         blackBlockRowsCnt
[ 146]delimiter:          ;
[ 147]delimiter:          }
[ 148]delimiter:          }
[ 149]delimiter:          }
[ 150]reserved word(15):  if
[ 150]operator(40):       (
[ 150]identifier:         blackBlockRowsCnt
[ 150]operator(62):       >
[ 150]constant:           6
[ 150]operator(41):       )
[ 150]delimiter:          {
[ 151]reserved word(19):  return
[ 151]identifier:         inRing
[ 151]operator(61):       =
[ 151]constant:           true
[ 151]delimiter:          ;
[ 152]delimiter:          }
[ 153]reserved word(19):  return
[ 153]constant:           false
[ 153]delimiter:          ;
[ 154]delimiter:          }
[ 156]reserved word(33):  bool
[ 156]identifier:         IsRingEnd
[ 156]operator(40):       (
[ 156]operator(41):       )
[ 156]delimiter:          {
[ 157]reserved word(15):  if
[ 157]operator(40):       (
[ 157]identifier:         resultSet
[ 157]operator(46):       .
[ 157]identifier:         rightBorderNotFoundCnt
[ 157]operator(60):       <
[ 157]constant:           15
[ 157]operator(41):       )
[ 157]delimiter:          {
[ 158]reserved word(19):  return
[ 158]constant:           false
[ 158]delimiter:          ;
[ 159]delimiter:          }
[ 160]delimiter:          {
[ 161]identifier:         int16_t
[ 161]identifier:         row
[ 161]delimiter:          ;
[ 162]identifier:         int16_t
[ 162]identifier:         cnt
[ 162]operator(61):       =
[ 162]constant:           0
[ 162]delimiter:          ;
[ 163]reserved word(13):  for
[ 163]operator(40):       (
[ 163]identifier:         row
[ 163]operator(61):       =
[ 163]constant:           0
[ 163]delimiter:          ;
[ 163]identifier:         row
[ 163]operator(60):       <
[ 163]identifier:         IMG_ROW
[ 163]operator(76):       &&
[ 163]identifier:         resultSet
[ 163]operator(46):       .
[ 163]identifier:         foundRightBorder
[ 163]delimiter:          [
[ 163]identifier:         row
[ 163]delimiter:          ]
[ 163]delimiter:          ;
[ 163]operator(86):       ++
[ 163]identifier:         row
[ 163]operator(41):       )
[ 163]delimiter:          {
[ 163]delimiter:          }
[ 164]reserved word(13):  for
[ 164]operator(40):       (
[ 164]delimiter:          ;
[ 164]identifier:         row
[ 164]operator(60):       <
[ 164]identifier:         IMG_ROW
[ 164]operator(76):       &&
[ 164]operator(33):       !
[ 164]identifier:         resultSet
[ 164]operator(46):       .
[ 164]identifier:         foundRightBorder
[ 164]delimiter:          [
[ 164]identifier:         row
[ 164]delimiter:          ]
[ 164]delimiter:          ;
[ 164]operator(86):       ++
[ 164]identifier:         row
[ 164]operator(41):       )
[ 164]delimiter:          {
[ 164]operator(86):       ++
[ 164]identifier:         cnt
[ 164]delimiter:          ;
[ 164]delimiter:          }
[ 165]identifier:         last_not_found_border_row
[ 165]operator(61):       =
[ 165]identifier:         row
[ 165]delimiter:          ;
[ 166]reserved word(15):  if
[ 166]operator(40):       (
[ 166]identifier:         cnt
[ 166]operator(60):       <
[ 166]constant:           9
[ 166]operator(41):       )
[ 166]delimiter:          {
[ 167]reserved word(19):  return
[ 167]constant:           false
[ 167]delimiter:          ;
[ 168]delimiter:          }
[ 169]delimiter:          }
[ 170]identifier:         int16_t
[ 170]identifier:         cnt
[ 170]operator(61):       =
[ 170]constant:           0
[ 170]delimiter:          ;
[ 171]identifier:         int16_t
[ 171]identifier:         row
[ 171]delimiter:          ;
[ 172]reserved word(13):  for
[ 172]operator(40):       (
[ 172]identifier:         row
[ 172]operator(61):       =
[ 172]constant:           20
[ 172]delimiter:          ;
[ 172]identifier:         row
[ 172]operator(60):       <
[ 172]constant:           40
[ 172]delimiter:          ;
[ 172]operator(86):       ++
[ 172]identifier:         row
[ 172]operator(41):       )
[ 172]delimiter:          {
[ 173]reserved word(15):  if
[ 173]operator(40):       (
[ 173]identifier:         OpstSign
[ 173]operator(40):       (
[ 173]identifier:         resultSet
[ 173]operator(46):       .
[ 173]identifier:         leftTrend
[ 173]delimiter:          [
[ 173]identifier:         row
[ 173]delimiter:          ]
[ 173]delimiter:          ,
[ 173]identifier:         resultSet
[ 173]operator(46):       .
[ 173]identifier:         leftTrend
[ 173]delimiter:          [
[ 173]identifier:         row
[ 173]operator(45):       -
[ 173]constant:           5
[ 173]delimiter:          ]
[ 173]operator(41):       )
[ 173]operator(41):       )
[ 173]delimiter:          {
[ 174]reserved word( 1):  break
[ 174]delimiter:          ;
[ 175]delimiter:          }
[ 176]delimiter:          }
[ 177]reserved word(15):  if
[ 177]operator(40):       (
[ 177]identifier:         row
[ 177]operator(123):       >=
[ 177]constant:           40
[ 177]operator(41):       )
[ 177]delimiter:          {
[ 178]reserved word(19):  return
[ 178]constant:           false
[ 178]delimiter:          ;
[ 179]delimiter:          }
[ 180]reserved word(13):  for
[ 180]operator(40):       (
[ 180]identifier:         row
[ 180]operator(61):       =
[ 180]identifier:         IMG_ROW
[ 180]operator(45):       -
[ 180]constant:           1
[ 180]delimiter:          ;
[ 180]identifier:         row
[ 180]operator(123):       >=
[ 180]constant:           35
[ 180]delimiter:          ;
[ 180]operator(90):       --
[ 180]identifier:         row
[ 180]operator(41):       )
[ 180]delimiter:          {
[ 181]reserved word(15):  if
[ 181]operator(40):       (
[ 181]identifier:         IsWhite
[ 181]operator(40):       (
[ 181]identifier:         row
[ 181]delimiter:          ,
[ 181]identifier:         resultSet
[ 181]operator(46):       .
[ 181]identifier:         middleLine
[ 181]delimiter:          [
[ 181]identifier:         row
[ 181]delimiter:          ]
[ 181]operator(41):       )
[ 181]operator(41):       )
[ 181]delimiter:          {
[ 182]operator(86):       ++
[ 182]identifier:         cnt
[ 182]delimiter:          ;
[ 183]reserved word(15):  if
[ 183]operator(40):       (
[ 183]identifier:         cnt
[ 183]operator(62):       >
[ 183]constant:           12
[ 183]operator(41):       )
[ 183]delimiter:          {
[ 184]reserved word(19):  return
[ 184]constant:           true
[ 184]delimiter:          ;
[ 185]delimiter:          }
[ 186]delimiter:          }
[ 187]delimiter:          }
[ 188]reserved word(19):  return
[ 188]constant:           false
[ 188]delimiter:          ;
[ 189]delimiter:          }
[ 191]identifier:         int16_t
[ 191]identifier:         WhichCurve
[ 191]operator(40):       (
[ 191]operator(41):       )
[ 191]delimiter:          {
[ 192]identifier:         int16_t
[ 192]identifier:         row
[ 192]delimiter:          ;
[ 193]reserved word(33):  bool
[ 193]identifier:         leftCurve
[ 193]operator(61):       =
[ 193]constant:           false
[ 193]delimiter:          ;
[ 194]reserved word(33):  bool
[ 194]identifier:         rightCurve
[ 194]operator(61):       =
[ 194]constant:           false
[ 194]delimiter:          ;
[ 195]identifier:         int16_t
[ 195]identifier:         cnt
[ 195]operator(61):       =
[ 195]constant:           0
[ 195]delimiter:          ;
[ 196]reserved word(13):  for
[ 196]operator(40):       (
[ 196]identifier:         row
[ 196]operator(61):       =
[ 196]constant:           5
[ 196]delimiter:          ;
[ 196]identifier:         row
[ 196]operator(60):       <
[ 196]identifier:         IMG_ROW
[ 196]operator(76):       &&
[ 196]identifier:         IsWhite
[ 196]operator(40):       (
[ 196]identifier:         row
[ 196]delimiter:          ,
[ 196]identifier:         resultSet
[ 196]operator(46):       .
[ 196]identifier:         middleLine
[ 196]delimiter:          [
[ 196]identifier:         row
[ 196]delimiter:          ]
[ 196]operator(41):       )
[ 196]delimiter:          ;
[ 196]operator(86):       ++
[ 196]identifier:         row
[ 196]operator(41):       )
[ 196]delimiter:          {
[ 196]delimiter:          }
[ 197]reserved word(15):  if
[ 197]operator(40):       (
[ 197]identifier:         row
[ 197]operator(60):       <
[ 197]identifier:         IMG_ROW
[ 197]operator(76):       &&
[ 197]operator(33):       !
[ 197]identifier:         InRange
[ 197]operator(40):       (
[ 197]identifier:         resultSet
[ 197]operator(46):       .
[ 197]identifier:         middleLine
[ 197]delimiter:          [
[ 197]identifier:         row
[ 197]delimiter:          ]
[ 197]delimiter:          ,
[ 197]identifier:         IMG_COL
[ 197]operator(47):       /
[ 197]constant:           2
[ 197]operator(45):       -
[ 197]constant:           22
[ 197]delimiter:          ,
[ 197]identifier:         IMG_COL
[ 197]operator(47):       /
[ 197]constant:           2
[ 197]operator(43):       +
[ 197]constant:           22
[ 197]operator(41):       )
[ 197]operator(41):       )
[ 197]delimiter:          {
[ 198]identifier:         black_pt_row
[ 198]operator(61):       =
[ 198]identifier:         row
[ 198]delimiter:          ;
[ 199]reserved word(13):  for
[ 199]operator(40):       (
[ 199]delimiter:          ;
[ 199]identifier:         row
[ 199]operator(123):       >=
[ 199]constant:           0
[ 199]delimiter:          ;
[ 199]operator(90):       --
[ 199]identifier:         row
[ 199]operator(41):       )
[ 199]delimiter:          {
[ 200]reserved word(15):  if
[ 200]operator(40):       (
[ 200]operator(33):       !
[ 200]identifier:         resultSet
[ 200]operator(46):       .
[ 200]identifier:         foundLeftBorder
[ 200]delimiter:          [
[ 200]identifier:         row
[ 200]delimiter:          ]
[ 200]operator(41):       )
[ 200]delimiter:          {
[ 201]identifier:         leftCurve
[ 201]operator(61):       =
[ 201]constant:           true
[ 201]delimiter:          ;
[ 202]reserved word( 1):  break
[ 202]delimiter:          ;
[ 203]delimiter:          }
[ 203]reserved word( 9):  else
[ 203]reserved word(15):  if
[ 203]operator(40):       (
[ 203]operator(33):       !
[ 203]identifier:         resultSet
[ 203]operator(46):       .
[ 203]identifier:         foundRightBorder
[ 203]delimiter:          [
[ 203]identifier:         row
[ 203]delimiter:          ]
[ 203]operator(41):       )
[ 203]delimiter:          {
[ 204]identifier:         rightCurve
[ 204]operator(61):       =
[ 204]constant:           true
[ 204]delimiter:          ;
[ 205]reserved word( 1):  break
[ 205]delimiter:          ;
[ 206]delimiter:          }
[ 207]delimiter:          }
[ 208]reserved word(15):  if
[ 208]operator(40):       (
[ 208]identifier:         leftCurve
[ 208]operator(41):       )
[ 208]delimiter:          {
[ 209]reserved word(13):  for
[ 209]operator(40):       (
[ 209]delimiter:          ;
[ 209]identifier:         row
[ 209]operator(123):       >=
[ 209]constant:           0
[ 209]delimiter:          ;
[ 209]operator(90):       --
[ 209]identifier:         row
[ 209]operator(41):       )
[ 209]delimiter:          {
[ 210]reserved word(15):  if
[ 210]operator(40):       (
[ 210]operator(33):       !
[ 210]identifier:         resultSet
[ 210]operator(46):       .
[ 210]identifier:         foundLeftBorder
[ 210]delimiter:          [
[ 210]identifier:         row
[ 210]delimiter:          ]
[ 210]operator(76):       &&
[ 210]identifier:         resultSet
[ 210]operator(46):       .
[ 210]identifier:         foundRightBorder
[ 210]delimiter:          [
[ 210]identifier:         row
[ 210]delimiter:          ]
[ 210]operator(41):       )
[ 210]delimiter:          {
[ 211]operator(86):       ++
[ 211]identifier:         cnt
[ 211]delimiter:          ;
[ 212]reserved word(15):  if
[ 212]operator(40):       (
[ 212]identifier:         cnt
[ 212]operator(62):       >
[ 212]constant:           5
[ 212]operator(41):       )
[ 212]delimiter:          {
[ 213]reserved word(19):  return
[ 213]identifier:         LeftCurve
[ 213]delimiter:          ;
[ 214]delimiter:          }
[ 215]delimiter:          }
[ 216]delimiter:          }
[ 217]delimiter:          }
[ 217]reserved word( 9):  else
[ 217]reserved word(15):  if
[ 217]operator(40):       (
[ 217]identifier:         rightCurve
[ 217]operator(41):       )
[ 217]delimiter:          {
[ 218]reserved word(13):  for
[ 218]operator(40):       (
[ 218]delimiter:          ;
[ 218]identifier:         row
[ 218]operator(123):       >=
[ 218]constant:           0
[ 218]delimiter:          ;
[ 218]operator(90):       --
[ 218]identifier:         row
[ 218]operator(41):       )
[ 218]delimiter:          {
[ 219]reserved word(15):  if
[ 219]operator(40):       (
[ 219]operator(33):       !
[ 219]identifier:         resultSet
[ 219]operator(46):       .
[ 219]identifier:         foundRightBorder
[ 219]delimiter:          [
[ 219]identifier:         row
[ 219]delimiter:          ]
[ 219]operator(76):       &&
[ 219]identifier:         resultSet
[ 219]operator(46):       .
[ 219]identifier:         foundLeftBorder
[ 219]delimiter:          [
[ 219]identifier:         row
[ 219]delimiter:          ]
[ 219]operator(41):       )
[ 219]delimiter:          {
[ 220]operator(86):       ++
[ 220]identifier:         cnt
[ 220]delimiter:          ;
[ 221]reserved word(15):  if
[ 221]operator(40):       (
[ 221]identifier:         cnt
[ 221]operator(62):       >
[ 221]constant:           5
[ 221]operator(41):       )
[ 221]delimiter:          {
[ 222]reserved word(19):  return
[ 222]identifier:         RightCurve
[ 222]delimiter:          ;
[ 223]delimiter:          }
[ 224]delimiter:          }
[ 225]delimiter:          }
[ 226]delimiter:          }
[ 227]delimiter:          }
[ 228]reserved word(19):  return
[ 228]identifier:         Unknown
[ 228]delimiter:          ;
[ 229]delimiter:          }
[ 231]reserved word(33):  bool
[ 231]identifier:         IsCrossRoad
[ 231]operator(40):       (
[ 231]operator(41):       )
[ 231]delimiter:          {
[ 232]reserved word(19):  return
[ 232]identifier:         resultSet
[ 232]operator(46):       .
[ 232]identifier:         leftBorderNotFoundCnt
[ 232]operator(62):       >
[ 232]constant:           2
[ 232]operator(76):       &&
[ 232]identifier:         resultSet
[ 232]operator(46):       .
[ 232]identifier:         rightBorderNotFoundCnt
[ 232]operator(62):       >
[ 232]constant:           2
[ 233]operator(76):       &&
[ 233]identifier:         resultSet
[ 233]operator(46):       .
[ 233]identifier:         leftBorderNotFoundCnt
[ 233]operator(43):       +
[ 233]identifier:         resultSet
[ 233]operator(46):       .
[ 233]identifier:         rightBorderNotFoundCnt
[ 233]operator(62):       >
[ 233]constant:           10
[ 233]delimiter:          ;
[ 234]delimiter:          }
[ 236]identifier:         int16_t
[ 236]identifier:         WhichBarrier
[ 236]operator(40):       (
[ 236]operator(41):       )
[ 236]delimiter:          {
[ 237]identifier:         int16_t
[ 237]identifier:         inRow
[ 237]delimiter:          ;
[ 238]identifier:         int16_t
[ 238]identifier:         outRow
[ 238]delimiter:          ;
[ 239]identifier:         int16_t
[ 239]identifier:         row
[ 239]delimiter:          ;
[ 240]identifier:         int16_t
[ 240]identifier:         _barrierType
[ 240]delimiter:          ;
[ 241]reserved word(13):  for
[ 241]operator(40):       (
[ 241]identifier:         row
[ 241]operator(61):       =
[ 241]constant:           10
[ 241]delimiter:          ;
[ 241]identifier:         row
[ 241]operator(60):       <
[ 241]constant:           45
[ 241]operator(76):       &&
[ 241]identifier:         Abs
[ 241]operator(40):       (
[ 241]identifier:         resultSet
[ 241]operator(46):       .
[ 241]identifier:         middleLine
[ 241]delimiter:          [
[ 241]identifier:         row
[ 241]delimiter:          ]
[ 241]operator(45):       -
[ 241]identifier:         resultSet
[ 241]operator(46):       .
[ 241]identifier:         middleLine
[ 241]delimiter:          [
[ 241]identifier:         row
[ 241]operator(45):       -
[ 241]constant:           2
[ 241]delimiter:          ]
[ 241]operator(41):       )
[ 241]operator(121):       <=
[ 241]constant:           16
[ 241]delimiter:          ;
[ 241]operator(86):       ++
[ 241]identifier:         row
[ 241]operator(41):       )
[ 241]delimiter:          {
[ 241]delimiter:          }
[ 242]reserved word(15):  if
[ 242]operator(40):       (
[ 242]operator(33):       !
[ 242]identifier:         InRange
[ 242]operator(40):       (
[ 242]identifier:         resultSet
[ 242]operator(46):       .
[ 242]identifier:         middleLine
[ 242]delimiter:          [
[ 242]identifier:         row
[ 242]operator(45):       -
[ 242]constant:           2
[ 242]delimiter:          ]
[ 242]delimiter:          ,
[ 242]identifier:         IMG_COL
[ 242]operator(47):       /
[ 242]constant:           2
[ 242]operator(45):       -
[ 242]constant:           20
[ 242]delimiter:          ,
[ 242]identifier:         IMG_COL
[ 242]operator(47):       /
[ 242]constant:           2
[ 242]operator(43):       +
[ 242]constant:           20
[ 242]operator(41):       )
[ 242]operator(41):       )
[ 242]delimiter:          {
[ 243]reserved word(19):  return
[ 243]identifier:         Unknown
[ 243]delimiter:          ;
[ 244]delimiter:          }
[ 246]identifier:         _barrierType
[ 246]operator(61):       =
[ 246]identifier:         resultSet
[ 246]operator(46):       .
[ 246]identifier:         middleLine
[ 246]delimiter:          [
[ 246]identifier:         row
[ 246]delimiter:          ]
[ 246]operator(45):       -
[ 246]identifier:         resultSet
[ 246]operator(46):       .
[ 246]identifier:         middleLine
[ 246]delimiter:          [
[ 246]identifier:         row
[ 246]operator(45):       -
[ 246]constant:           2
[ 246]delimiter:          ]
[ 246]operator(62):       >
[ 246]constant:           0
[ 246]operator(63):       ?
[ 246]identifier:         LeftBarrier
[ 246]operator(58):       :
[ 246]identifier:         RightBarrier
[ 246]delimiter:          ;
[ 248]identifier:         inRow
[ 248]operator(61):       =
[ 248]identifier:         row
[ 248]delimiter:          ;
[ 249]identifier:         row
[ 249]operator(104):       +=
[ 249]constant:           2
[ 249]delimiter:          ;
[ 250]reserved word(13):  for
[ 250]operator(40):       (
[ 250]delimiter:          ;
[ 250]identifier:         row
[ 250]operator(60):       <
[ 250]identifier:         IMG_ROW
[ 250]operator(76):       &&
[ 250]identifier:         Abs
[ 250]operator(40):       (
[ 250]identifier:         resultSet
[ 250]operator(46):       .
[ 250]identifier:         middleLine
[ 250]delimiter:          [
[ 250]identifier:         row
[ 250]delimiter:          ]
[ 250]operator(45):       -
[ 250]identifier:         resultSet
[ 250]operator(46):       .
[ 250]identifier:         middleLine
[ 250]delimiter:          [
[ 250]identifier:         row
[ 250]operator(45):       -
[ 250]constant:           2
[ 250]delimiter:          ]
[ 250]operator(41):       )
[ 250]operator(121):       <=
[ 250]constant:           10
[ 250]delimiter:          ;
[ 250]operator(86):       ++
[ 250]identifier:         row
[ 250]operator(41):       )
[ 250]delimiter:          {
[ 250]delimiter:          }
[ 251]reserved word(15):  if
[ 251]operator(40):       (
[ 251]operator(40):       (
[ 251]identifier:         resultSet
[ 251]operator(46):       .
[ 251]identifier:         middleLine
[ 251]delimiter:          [
[ 251]identifier:         row
[ 251]delimiter:          ]
[ 251]operator(45):       -
[ 251]identifier:         resultSet
[ 251]operator(46):       .
[ 251]identifier:         middleLine
[ 251]delimiter:          [
[ 251]identifier:         row
[ 251]operator(45):       -
[ 251]constant:           2
[ 251]delimiter:          ]
[ 251]operator(62):       >
[ 251]constant:           0
[ 251]operator(76):       &&
[ 251]identifier:         _barrierType
[ 251]operator(122):       ==
[ 251]identifier:         LeftBarrier
[ 251]operator(41):       )
[ 252]operator(248):       ||
[ 252]operator(40):       (
[ 252]identifier:         resultSet
[ 252]operator(46):       .
[ 252]identifier:         middleLine
[ 252]delimiter:          [
[ 252]identifier:         row
[ 252]delimiter:          ]
[ 252]operator(45):       -
[ 252]identifier:         resultSet
[ 252]operator(46):       .
[ 252]identifier:         middleLine
[ 252]delimiter:          [
[ 252]identifier:         row
[ 252]operator(45):       -
[ 252]constant:           2
[ 252]delimiter:          ]
[ 252]operator(60):       <
[ 252]constant:           0
[ 252]operator(76):       &&
[ 252]identifier:         _barrierType
[ 252]operator(122):       ==
[ 252]identifier:         RightBarrier
[ 252]operator(41):       )
[ 252]operator(41):       )
[ 252]delimiter:          {
[ 253]reserved word(19):  return
[ 253]identifier:         Unknown
[ 253]delimiter:          ;
[ 254]delimiter:          }
[ 255]identifier:         outRow
[ 255]operator(61):       =
[ 255]identifier:         row
[ 255]delimiter:          ;
[ 256]reserved word(15):  if
[ 256]operator(40):       (
[ 256]identifier:         outRow
[ 256]operator(45):       -
[ 256]identifier:         inRow
[ 256]operator(62):       >
[ 256]constant:           5
[ 256]operator(76):       &&
[ 256]identifier:         row
[ 256]operator(60):       <
[ 256]identifier:         IMG_ROW
[ 256]operator(76):       &&
[ 256]identifier:         resultSet
[ 256]operator(46):       .
[ 256]identifier:         middleLine
[ 256]delimiter:          [
[ 256]identifier:         row
[ 256]delimiter:          ]
[ 256]operator(62):       >
[ 256]identifier:         IMG_COL
[ 256]operator(47):       /
[ 256]constant:           2
[ 256]operator(45):       -
[ 256]constant:           20
[ 257]operator(76):       &&
[ 257]identifier:         resultSet
[ 257]operator(46):       .
[ 257]identifier:         middleLine
[ 257]delimiter:          [
[ 257]identifier:         row
[ 257]delimiter:          ]
[ 257]operator(60):       <
[ 257]identifier:         IMG_COL
[ 257]operator(47):       /
[ 257]constant:           2
[ 257]operator(43):       +
[ 257]constant:           20
[ 257]operator(41):       )
[ 257]delimiter:          {
[ 258]identifier:         aroundBarrier
[ 258]operator(61):       =
[ 258]constant:           true
[ 258]delimiter:          ;
[ 259]reserved word(19):  return
[ 259]identifier:         barrierType
[ 259]operator(61):       =
[ 259]identifier:         _barrierType
[ 259]delimiter:          ;
[ 260]delimiter:          }
[ 260]reserved word( 9):  else
[ 260]delimiter:          {
[ 261]reserved word(19):  return
[ 261]identifier:         Unknown
[ 261]delimiter:          ;
[ 262]delimiter:          }
[ 263]delimiter:          }
[ 265]reserved word(29):  void
[ 265]identifier:         RingCompensateGoLeft
[ 265]operator(40):       (
[ 265]operator(41):       )
[ 265]delimiter:          {
[ 266]reserved word(16):  int
[ 266]identifier:         row
[ 266]delimiter:          ;
[ 267]reserved word(13):  for
[ 267]operator(40):       (
[ 267]identifier:         row
[ 267]operator(61):       =
[ 267]identifier:         IMG_ROW
[ 267]operator(45):       -
[ 267]constant:           1
[ 267]delimiter:          ;
[ 268]identifier:         row
[ 268]operator(123):       >=
[ 268]constant:           30
[ 268]operator(76):       &&
[ 268]identifier:         IsWhite
[ 268]operator(40):       (
[ 268]identifier:         row
[ 268]delimiter:          ,
[ 268]identifier:         IMG_COL
[ 268]operator(47):       /
[ 268]constant:           2
[ 268]operator(41):       )
[ 268]delimiter:          ;
[ 268]operator(90):       --
[ 268]identifier:         row
[ 268]operator(41):       )
[ 268]delimiter:          {
[ 268]delimiter:          }
[ 269]reserved word(13):  for
[ 269]operator(40):       (
[ 269]delimiter:          ;
[ 269]identifier:         row
[ 269]operator(123):       >=
[ 269]constant:           10
[ 269]operator(76):       &&
[ 269]identifier:         IsBlack
[ 269]operator(40):       (
[ 269]identifier:         row
[ 269]delimiter:          ,
[ 269]identifier:         IMG_COL
[ 269]operator(47):       /
[ 269]constant:           2
[ 269]operator(41):       )
[ 269]delimiter:          ;
[ 269]operator(90):       --
[ 269]identifier:         row
[ 269]operator(41):       )
[ 269]delimiter:          {
[ 269]delimiter:          }
[ 270]reserved word(16):  int
[ 270]identifier:         col
[ 270]delimiter:          ;
[ 271]reserved word(13):  for
[ 271]operator(40):       (
[ 271]identifier:         col
[ 271]operator(61):       =
[ 271]identifier:         IMG_COL
[ 271]operator(47):       /
[ 271]constant:           2
[ 271]delimiter:          ;
[ 271]identifier:         col
[ 271]operator(123):       >=
[ 271]constant:           0
[ 271]operator(76):       &&
[ 271]identifier:         IsBlack
[ 271]operator(40):       (
[ 271]identifier:         row
[ 271]operator(43):       +
[ 271]constant:           1
[ 271]delimiter:          ,
[ 271]identifier:         col
[ 271]operator(41):       )
[ 271]delimiter:          ;
[ 271]operator(90):       --
[ 271]identifier:         col
[ 271]operator(41):       )
[ 271]delimiter:          {
[ 271]delimiter:          }
[ 272]reserved word(13):  for
[ 272]operator(40):       (
[ 272]reserved word(16):  int
[ 272]identifier:         i
[ 272]operator(61):       =
[ 272]identifier:         row
[ 272]delimiter:          ;
[ 272]identifier:         i
[ 272]operator(62):       >
[ 272]constant:           0
[ 272]delimiter:          ;
[ 272]operator(90):       --
[ 272]identifier:         i
[ 272]operator(41):       )
[ 273]delimiter:          {
[ 274]identifier:         resultSet
[ 274]operator(46):       .
[ 274]identifier:         rightBorder
[ 274]delimiter:          [
[ 274]identifier:         i
[ 274]delimiter:          ]
[ 274]operator(61):       =
[ 274]identifier:         col
[ 274]operator(43):       +
[ 274]operator(40):       (
[ 274]identifier:         row
[ 274]operator(43):       +
[ 274]constant:           1
[ 274]operator(45):       -
[ 274]identifier:         i
[ 274]operator(41):       )
[ 274]operator(42):       *
[ 274]operator(40):       (
[ 274]identifier:         resultSet
[ 274]operator(46):       .
[ 274]identifier:         rightBorder
[ 274]delimiter:          [
[ 274]constant:           0
[ 274]delimiter:          ]
[ 274]operator(45):       -
[ 274]identifier:         col
[ 274]operator(41):       )
[ 274]operator(47):       /
[ 274]identifier:         row
[ 274]delimiter:          ;
[ 275]identifier:         MiddleLineUpdate
[ 275]operator(40):       (
[ 275]identifier:         i
[ 275]operator(41):       )
[ 275]delimiter:          ;
[ 276]delimiter:          }
[ 277]identifier:         int16_t
[ 277]identifier:         borderSearchStart
[ 277]operator(61):       =
[ 277]identifier:         col
[ 277]operator(47):       /
[ 277]constant:           2
[ 277]delimiter:          ;
[ 278]reserved word(13):  for
[ 278]operator(40):       (
[ 278]reserved word(16):  int
[ 278]identifier:         i
[ 278]operator(61):       =
[ 278]identifier:         row
[ 278]delimiter:          ;
[ 278]identifier:         i
[ 278]operator(60):       <
[ 278]identifier:         IMG_ROW
[ 278]delimiter:          ;
[ 278]operator(86):       ++
[ 278]identifier:         i
[ 278]operator(41):       )
[ 279]delimiter:          {
[ 280]identifier:         LeftBorderSearchFrom
[ 280]operator(40):       (
[ 280]identifier:         i
[ 280]delimiter:          ,
[ 280]identifier:         borderSearchStart
[ 280]operator(41):       )
[ 280]delimiter:          ;
[ 281]identifier:         RightBorderSearchFrom
[ 281]operator(40):       (
[ 281]identifier:         i
[ 281]delimiter:          ,
[ 281]identifier:         borderSearchStart
[ 281]operator(41):       )
[ 281]delimiter:          ;
[ 282]identifier:         MiddleLineUpdate
[ 282]operator(40):       (
[ 282]identifier:         i
[ 282]operator(41):       )
[ 282]delimiter:          ;
[ 283]identifier:         borderSearchStart
[ 283]operator(61):       =
[ 283]identifier:         resultSet
[ 283]operator(46):       .
[ 283]identifier:         middleLine
[ 283]delimiter:          [
[ 283]identifier:         i
[ 283]delimiter:          ]
[ 283]delimiter:          ;
[ 284]delimiter:          }
[ 285]delimiter:          }
[ 287]reserved word(29):  void
[ 287]identifier:         RingCompensateGoRight
[ 287]operator(40):       (
[ 287]operator(41):       )
[ 287]delimiter:          {
[ 288]reserved word(16):  int
[ 288]identifier:         row
[ 288]delimiter:          ;
[ 289]reserved word(13):  for
[ 289]operator(40):       (
[ 289]identifier:         row
[ 289]operator(61):       =
[ 289]identifier:         IMG_ROW
[ 289]operator(45):       -
[ 289]constant:           1
[ 289]delimiter:          ;
[ 290]identifier:         row
[ 290]operator(123):       >=
[ 290]constant:           30
[ 290]operator(76):       &&
[ 290]identifier:         IsWhite
[ 290]operator(40):       (
[ 290]identifier:         row
[ 290]delimiter:          ,
[ 290]identifier:         IMG_COL
[ 290]operator(47):       /
[ 290]constant:           2
[ 290]operator(41):       )
[ 290]delimiter:          ;
[ 290]operator(90):       --
[ 290]identifier:         row
[ 290]operator(41):       )
[ 290]delimiter:          {
[ 290]delimiter:          }
[ 291]reserved word(13):  for
[ 291]operator(40):       (
[ 291]delimiter:          ;
[ 291]identifier:         row
[ 291]operator(123):       >=
[ 291]constant:           10
[ 291]operator(76):       &&
[ 291]identifier:         IsBlack
[ 291]operator(40):       (
[ 291]identifier:         row
[ 291]delimiter:          ,
[ 291]identifier:         IMG_COL
[ 291]operator(47):       /
[ 291]constant:           2
[ 291]operator(41):       )
[ 291]delimiter:          ;
[ 291]operator(90):       --
[ 291]identifier:         row
[ 291]operator(41):       )
[ 291]delimiter:          {
[ 291]delimiter:          }
[ 292]reserved word(16):  int
[ 292]identifier:         col
[ 292]delimiter:          ;
[ 293]reserved word(13):  for
[ 293]operator(40):       (
[ 293]identifier:         col
[ 293]operator(61):       =
[ 293]identifier:         IMG_COL
[ 293]operator(47):       /
[ 293]constant:           2
[ 293]delimiter:          ;
[ 293]identifier:         col
[ 293]operator(60):       <
[ 293]identifier:         IMG_COL
[ 293]operator(76):       &&
[ 293]identifier:         IsBlack
[ 293]operator(40):       (
[ 293]identifier:         row
[ 293]operator(43):       +
[ 293]constant:           1
[ 293]delimiter:          ,
[ 293]identifier:         col
[ 293]operator(41):       )
[ 293]delimiter:          ;
[ 293]operator(86):       ++
[ 293]identifier:         col
[ 293]operator(41):       )
[ 293]delimiter:          {
[ 293]delimiter:          }
[ 294]reserved word(13):  for
[ 294]operator(40):       (
[ 294]reserved word(16):  int
[ 294]identifier:         i
[ 294]operator(61):       =
[ 294]identifier:         row
[ 294]delimiter:          ;
[ 294]identifier:         i
[ 294]operator(62):       >
[ 294]constant:           0
[ 294]delimiter:          ;
[ 294]operator(90):       --
[ 294]identifier:         i
[ 294]operator(41):       )
[ 295]delimiter:          {
[ 296]identifier:         resultSet
[ 296]operator(46):       .
[ 296]identifier:         leftBorder
[ 296]delimiter:          [
[ 296]identifier:         i
[ 296]delimiter:          ]
[ 296]operator(61):       =
[ 296]identifier:         col
[ 296]operator(45):       -
[ 296]operator(40):       (
[ 296]identifier:         row
[ 296]operator(43):       +
[ 296]constant:           1
[ 296]operator(45):       -
[ 296]identifier:         i
[ 296]operator(41):       )
[ 296]operator(42):       *
[ 296]operator(40):       (
[ 296]identifier:         col
[ 296]operator(45):       -
[ 296]identifier:         resultSet
[ 296]operator(46):       .
[ 296]identifier:         leftBorder
[ 296]delimiter:          [
[ 296]constant:           0
[ 296]delimiter:          ]
[ 296]operator(41):       )
[ 296]operator(47):       /
[ 296]identifier:         row
[ 296]delimiter:          ;
[ 297]identifier:         MiddleLineUpdate
[ 297]operator(40):       (
[ 297]identifier:         i
[ 297]operator(41):       )
[ 297]delimiter:          ;
[ 298]delimiter:          }
[ 299]identifier:         int16_t
[ 299]identifier:         borderSearchStart
[ 299]operator(61):       =
[ 299]identifier:         col
[ 299]operator(43):       +
[ 299]operator(40):       (
[ 299]identifier:         IMG_COL
[ 299]operator(45):       -
[ 299]identifier:         col
[ 299]operator(41):       )
[ 299]operator(47):       /
[ 299]constant:           2
[ 299]delimiter:          ;
[ 300]reserved word(13):  for
[ 300]operator(40):       (
[ 300]reserved word(16):  int
[ 300]identifier:         i
[ 300]operator(61):       =
[ 300]identifier:         row
[ 300]delimiter:          ;
[ 300]identifier:         i
[ 300]operator(60):       <
[ 300]identifier:         IMG_ROW
[ 300]delimiter:          ;
[ 300]operator(86):       ++
[ 300]identifier:         i
[ 300]operator(41):       )
[ 301]delimiter:          {
[ 302]identifier:         LeftBorderSearchFrom
[ 302]operator(40):       (
[ 302]identifier:         i
[ 302]delimiter:          ,
[ 302]identifier:         borderSearchStart
[ 302]operator(41):       )
[ 302]delimiter:          ;
[ 303]identifier:         RightBorderSearchFrom
[ 303]operator(40):       (
[ 303]identifier:         i
[ 303]delimiter:          ,
[ 303]identifier:         borderSearchStart
[ 303]operator(41):       )
[ 303]delimiter:          ;
[ 304]identifier:         MiddleLineUpdate
[ 304]operator(40):       (
[ 304]identifier:         i
[ 304]operator(41):       )
[ 304]delimiter:          ;
[ 305]identifier:         borderSearchStart
[ 305]operator(61):       =
[ 305]identifier:         resultSet
[ 305]operator(46):       .
[ 305]identifier:         middleLine
[ 305]delimiter:          [
[ 305]identifier:         i
[ 305]delimiter:          ]
[ 305]delimiter:          ;
[ 306]delimiter:          }
[ 307]delimiter:          }
[ 309]reserved word(29):  void
[ 309]identifier:         RingEndCompensateFromLeft
[ 309]operator(40):       (
[ 309]operator(41):       )
[ 309]delimiter:          {
[ 310]identifier:         int16_t
[ 310]identifier:         row
[ 310]delimiter:          ;
[ 311]identifier:         int16_t
[ 311]identifier:         col
[ 311]delimiter:          ;
[ 312]reserved word(13):  for
[ 312]operator(40):       (
[ 312]identifier:         row
[ 312]operator(61):       =
[ 312]identifier:         last_not_found_border_row
[ 312]delimiter:          ;
[ 312]identifier:         row
[ 312]operator(60):       <
[ 312]identifier:         IMG_ROW
[ 312]delimiter:          ;
[ 312]operator(86):       ++
[ 312]identifier:         row
[ 312]operator(41):       )
[ 312]delimiter:          {
[ 313]reserved word(15):  if
[ 313]operator(40):       (
[ 313]identifier:         resultSet
[ 313]operator(46):       .
[ 313]identifier:         rightBorder
[ 313]delimiter:          [
[ 313]identifier:         row
[ 313]delimiter:          ]
[ 313]operator(60):       <
[ 313]identifier:         IMG_COL
[ 313]operator(45):       -
[ 313]constant:           40
[ 313]operator(41):       )
[ 313]delimiter:          {
[ 314]identifier:         col
[ 314]operator(61):       =
[ 314]identifier:         resultSet
[ 314]operator(46):       .
[ 314]identifier:         rightBorder
[ 314]delimiter:          [
[ 314]identifier:         row
[ 314]delimiter:          ]
[ 314]delimiter:          ;
[ 315]reserved word( 1):  break
[ 315]delimiter:          ;
[ 316]delimiter:          }
[ 317]delimiter:          }
[ 318]reserved word(15):  if
[ 318]operator(40):       (
[ 318]identifier:         row
[ 318]operator(60):       <
[ 318]identifier:         IMG_ROW
[ 318]operator(41):       )
[ 318]delimiter:          {
[ 319]operator(90):       --
[ 319]identifier:         row
[ 319]delimiter:          ;
[ 320]reserved word(13):  for
[ 320]operator(40):       (
[ 320]delimiter:          ;
[ 320]identifier:         row
[ 320]operator(123):       >=
[ 320]constant:           0
[ 320]delimiter:          ;
[ 320]operator(90):       --
[ 320]identifier:         row
[ 320]operator(41):       )
[ 320]delimiter:          {
[ 321]identifier:         resultSet
[ 321]operator(46):       .
[ 321]identifier:         rightBorder
[ 321]delimiter:          [
[ 321]identifier:         row
[ 321]delimiter:          ]
[ 321]operator(61):       =
[ 321]identifier:         col
[ 321]delimiter:          ;
[ 322]delimiter:          }
[ 323]identifier:         MiddleLineUpdateAll
[ 323]operator(40):       (
[ 323]operator(41):       )
[ 323]delimiter:          ;
[ 324]delimiter:          }
[ 325]delimiter:          }
[ 327]reserved word(29):  void
[ 327]identifier:         RingEndCompensateFromRight
[ 327]operator(40):       (
[ 327]operator(41):       )
[ 327]delimiter:          {
[ 328]identifier:         int16_t
[ 328]identifier:         row
[ 328]delimiter:          ;
[ 329]identifier:         int16_t
[ 329]identifier:         col
[ 329]delimiter:          ;
[ 330]reserved word(13):  for
[ 330]operator(40):       (
[ 330]identifier:         row
[ 330]operator(61):       =
[ 330]identifier:         last_not_found_border_row
[ 330]delimiter:          ;
[ 330]identifier:         row
[ 330]operator(60):       <
[ 330]identifier:         IMG_ROW
[ 330]delimiter:          ;
[ 330]operator(86):       ++
[ 330]identifier:         row
[ 330]operator(41):       )
[ 330]delimiter:          {
[ 331]reserved word(15):  if
[ 331]operator(40):       (
[ 331]identifier:         resultSet
[ 331]operator(46):       .
[ 331]identifier:         leftBorder
[ 331]delimiter:          [
[ 331]identifier:         row
[ 331]delimiter:          ]
[ 331]operator(62):       >
[ 331]constant:           40
[ 331]operator(41):       )
[ 331]delimiter:          {
[ 332]identifier:         col
[ 332]operator(61):       =
[ 332]identifier:         resultSet
[ 332]operator(46):       .
[ 332]identifier:         leftBorder
[ 332]delimiter:          [
[ 332]identifier:         row
[ 332]delimiter:          ]
[ 332]delimiter:          ;
[ 333]reserved word( 1):  break
[ 333]delimiter:          ;
[ 334]delimiter:          }
[ 335]delimiter:          }
[ 336]reserved word(15):  if
[ 336]operator(40):       (
[ 336]identifier:         row
[ 336]operator(60):       <
[ 336]identifier:         IMG_ROW
[ 336]operator(41):       )
[ 336]delimiter:          {
[ 337]operator(90):       --
[ 337]identifier:         row
[ 337]delimiter:          ;
[ 338]reserved word(13):  for
[ 338]operator(40):       (
[ 338]delimiter:          ;
[ 338]identifier:         row
[ 338]operator(123):       >=
[ 338]constant:           0
[ 338]delimiter:          ;
[ 338]operator(90):       --
[ 338]identifier:         row
[ 338]operator(41):       )
[ 338]delimiter:          {
[ 339]identifier:         resultSet
[ 339]operator(46):       .
[ 339]identifier:         leftBorder
[ 339]delimiter:          [
[ 339]identifier:         row
[ 339]delimiter:          ]
[ 339]operator(61):       =
[ 339]identifier:         col
[ 339]delimiter:          ;
[ 340]delimiter:          }
[ 341]identifier:         MiddleLineUpdateAll
[ 341]operator(40):       (
[ 341]operator(41):       )
[ 341]delimiter:          ;
[ 342]delimiter:          }
[ 343]delimiter:          }
[ 345]reserved word(29):  void
[ 345]identifier:         LeftCurveCompensate
[ 345]operator(40):       (
[ 345]operator(41):       )
[ 345]delimiter:          {
[ 346]reserved word(13):  for
[ 346]operator(40):       (
[ 346]reserved word(16):  int
[ 346]identifier:         row_
[ 346]operator(61):       =
[ 346]identifier:         IMG_ROW
[ 346]operator(45):       -
[ 346]constant:           1
[ 346]delimiter:          ;
[ 346]identifier:         row_
[ 346]operator(62):       >
[ 346]identifier:         black_pt_row
[ 346]delimiter:          ;
[ 346]operator(90):       --
[ 346]identifier:         row_
[ 346]operator(41):       )
[ 347]delimiter:          {
[ 348]identifier:         resultSet
[ 348]operator(46):       .
[ 348]identifier:         middleLine
[ 348]delimiter:          [
[ 348]identifier:         row_
[ 348]delimiter:          ]
[ 348]operator(61):       =
[ 348]constant:           0
[ 348]delimiter:          ;
[ 349]delimiter:          }
[ 350]reserved word(13):  for
[ 350]operator(40):       (
[ 350]reserved word(16):  int
[ 350]identifier:         cnt
[ 350]operator(61):       =
[ 350]constant:           0
[ 350]delimiter:          ;
[ 350]identifier:         cnt
[ 350]operator(60):       <
[ 350]constant:           12
[ 350]delimiter:          ;
[ 350]operator(86):       ++
[ 350]identifier:         cnt
[ 350]operator(41):       )
[ 351]delimiter:          {
[ 352]identifier:         resultSet
[ 352]operator(46):       .
[ 352]identifier:         middleLine
[ 352]delimiter:          [
[ 352]identifier:         black_pt_row
[ 352]operator(45):       -
[ 352]identifier:         cnt
[ 352]delimiter:          ]
[ 352]operator(61):       =
[ 352]identifier:         cnt
[ 352]operator(42):       *
[ 352]identifier:         resultSet
[ 352]operator(46):       .
[ 352]identifier:         middleLine
[ 352]delimiter:          [
[ 352]identifier:         black_pt_row
[ 352]operator(45):       -
[ 352]constant:           12
[ 352]delimiter:          ]
[ 352]operator(47):       /
[ 352]constant:           12
[ 352]delimiter:          ;
[ 353]delimiter:          }
[ 354]delimiter:          }
[ 356]reserved word(29):  void
[ 356]identifier:         RightCurveCompensate
[ 356]operator(40):       (
[ 356]operator(41):       )
[ 356]delimiter:          {
[ 357]reserved word(13):  for
[ 357]operator(40):       (
[ 357]reserved word(16):  int
[ 357]identifier:         row_
[ 357]operator(61):       =
[ 357]identifier:         IMG_ROW
[ 357]operator(45):       -
[ 357]constant:           1
[ 357]delimiter:          ;
[ 357]identifier:         row_
[ 357]operator(62):       >
[ 357]identifier:         black_pt_row
[ 357]delimiter:          ;
[ 357]operator(90):       --
[ 357]identifier:         row_
[ 357]operator(41):       )
[ 358]delimiter:          {
[ 359]identifier:         resultSet
[ 359]operator(46):       .
[ 359]identifier:         middleLine
[ 359]delimiter:          [
[ 359]identifier:         row_
[ 359]delimiter:          ]
[ 359]operator(61):       =
[ 359]identifier:         IMG_COL
[ 359]operator(45):       -
[ 359]constant:           1
[ 359]delimiter:          ;
[ 360]delimiter:          }
[ 361]reserved word(13):  for
[ 361]operator(40):       (
[ 361]reserved word(16):  int
[ 361]identifier:         cnt
[ 361]operator(61):       =
[ 361]constant:           0
[ 361]delimiter:          ;
[ 361]identifier:         cnt
[ 361]operator(60):       <
[ 361]constant:           12
[ 361]delimiter:          ;
[ 361]operator(86):       ++
[ 361]identifier:         cnt
[ 361]operator(41):       )
[ 362]delimiter:          {
[ 363]identifier:         resultSet
[ 363]operator(46):       .
[ 363]identifier:         middleLine
[ 363]delimiter:          [
[ 363]identifier:         black_pt_row
[ 363]operator(45):       -
[ 363]identifier:         cnt
[ 363]delimiter:          ]
[ 363]operator(61):       =
[ 363]identifier:         IMG_COL
[ 363]operator(45):       -
[ 363]constant:           1
[ 364]operator(45):       -
[ 364]identifier:         cnt
[ 364]operator(42):       *
[ 364]operator(40):       (
[ 364]identifier:         IMG_COL
[ 364]operator(45):       -
[ 364]constant:           1
[ 364]operator(45):       -
[ 364]identifier:         resultSet
[ 364]operator(46):       .
[ 364]identifier:         middleLine
[ 364]delimiter:          [
[ 364]identifier:         black_pt_row
[ 364]operator(45):       -
[ 364]constant:           12
[ 364]delimiter:          ]
[ 364]operator(41):       )
[ 364]operator(47):       /
[ 364]constant:           12
[ 364]delimiter:          ;
[ 365]delimiter:          }
[ 366]delimiter:          }
[ 368]reserved word(29):  void
[ 368]identifier:         CrossRoadCompensate
[ 368]operator(40):       (
[ 368]operator(41):       )
[ 368]delimiter:          {
[ 369]reserved word(16):  int
[ 369]identifier:         leftCompensateEnd
[ 369]operator(61):       =
[ 369]identifier:         CrossRoadCompensateOneSide
[ 369]operator(40):       (
[ 369]identifier:         resultSet
[ 369]operator(46):       .
[ 369]identifier:         leftBorder
[ 369]delimiter:          ,
[ 369]identifier:         resultSet
[ 369]operator(46):       .
[ 369]identifier:         leftSlope
[ 369]delimiter:          ,
[ 369]identifier:         resultSet
[ 369]operator(46):       .
[ 369]identifier:         leftZero
[ 369]operator(41):       )
[ 369]delimiter:          ;
[ 370]reserved word(16):  int
[ 370]identifier:         rightCompensateEnd
[ 370]operator(61):       =
[ 370]identifier:         CrossRoadCompensateOneSide
[ 370]operator(40):       (
[ 370]identifier:         resultSet
[ 370]operator(46):       .
[ 370]identifier:         rightBorder
[ 370]delimiter:          ,
[ 370]identifier:         resultSet
[ 370]operator(46):       .
[ 370]identifier:         rightSlope
[ 370]delimiter:          ,
[ 370]identifier:         resultSet
[ 370]operator(46):       .
[ 370]identifier:         rightZero
[ 370]operator(41):       )
[ 370]delimiter:          ;
[ 372]reserved word(16):  int
[ 372]identifier:         borderSearchStart
[ 372]delimiter:          ;
[ 374]reserved word(15):  if
[ 374]operator(40):       (
[ 374]identifier:         leftCompensateEnd
[ 374]operator(60):       <
[ 374]identifier:         rightCompensateEnd
[ 374]operator(41):       )
[ 375]delimiter:          {
[ 376]identifier:         borderSearchStart
[ 376]operator(61):       =
[ 376]operator(40):       (
[ 376]identifier:         resultSet
[ 376]operator(46):       .
[ 376]identifier:         leftBorder
[ 376]delimiter:          [
[ 376]identifier:         leftCompensateEnd
[ 376]operator(45):       -
[ 376]constant:           1
[ 376]delimiter:          ]
[ 376]operator(43):       +
[ 376]identifier:         resultSet
[ 376]operator(46):       .
[ 376]identifier:         rightBorder
[ 376]delimiter:          [
[ 376]identifier:         leftCompensateEnd
[ 376]operator(45):       -
[ 376]constant:           1
[ 376]delimiter:          ]
[ 376]operator(41):       )
[ 376]operator(47):       /
[ 376]constant:           2
[ 376]delimiter:          ;
[ 377]reserved word(13):  for
[ 377]operator(40):       (
[ 377]reserved word(16):  int
[ 377]identifier:         row
[ 377]operator(61):       =
[ 377]identifier:         leftCompensateEnd
[ 377]delimiter:          ;
[ 377]identifier:         row
[ 377]operator(60):       <
[ 377]identifier:         rightCompensateEnd
[ 377]delimiter:          ;
[ 377]operator(86):       ++
[ 377]identifier:         row
[ 377]operator(41):       )
[ 378]delimiter:          {
[ 379]identifier:         LeftBorderSearchFrom
[ 379]operator(40):       (
[ 379]identifier:         row
[ 379]delimiter:          ,
[ 379]identifier:         borderSearchStart
[ 379]operator(41):       )
[ 379]delimiter:          ;
[ 380]identifier:         borderSearchStart
[ 380]operator(61):       =
[ 380]operator(40):       (
[ 380]identifier:         resultSet
[ 380]operator(46):       .
[ 380]identifier:         rightBorder
[ 380]delimiter:          [
[ 380]identifier:         row
[ 380]delimiter:          ]
[ 380]operator(43):       +
[ 380]identifier:         resultSet
[ 380]operator(46):       .
[ 380]identifier:         leftBorder
[ 380]delimiter:          [
[ 380]identifier:         row
[ 380]delimiter:          ]
[ 380]operator(41):       )
[ 380]operator(47):       /
[ 380]constant:           2
[ 380]delimiter:          ;
[ 381]delimiter:          }
[ 382]delimiter:          }
[ 383]reserved word( 9):  else
[ 383]reserved word(15):  if
[ 383]operator(40):       (
[ 383]identifier:         leftCompensateEnd
[ 383]operator(62):       >
[ 383]identifier:         rightCompensateEnd
[ 383]operator(41):       )
[ 384]delimiter:          {
[ 385]identifier:         borderSearchStart
[ 385]operator(61):       =
[ 385]operator(40):       (
[ 385]identifier:         resultSet
[ 385]operator(46):       .
[ 385]identifier:         leftBorder
[ 385]delimiter:          [
[ 385]identifier:         rightCompensateEnd
[ 385]operator(45):       -
[ 385]constant:           1
[ 385]delimiter:          ]
[ 385]operator(43):       +
[ 385]identifier:         resultSet
[ 385]operator(46):       .
[ 385]identifier:         rightBorder
[ 385]delimiter:          [
[ 385]identifier:         rightCompensateEnd
[ 385]operator(45):       -
[ 385]constant:           1
[ 385]delimiter:          ]
[ 385]operator(41):       )
[ 385]operator(47):       /
[ 385]constant:           2
[ 385]delimiter:          ;
[ 386]reserved word(13):  for
[ 386]operator(40):       (
[ 386]reserved word(16):  int
[ 386]identifier:         row
[ 386]operator(61):       =
[ 386]identifier:         rightCompensateEnd
[ 386]delimiter:          ;
[ 386]identifier:         row
[ 386]operator(60):       <
[ 386]identifier:         leftCompensateEnd
[ 386]delimiter:          ;
[ 386]operator(86):       ++
[ 386]identifier:         row
[ 386]operator(41):       )
[ 387]delimiter:          {
[ 388]identifier:         RightBorderSearchFrom
[ 388]operator(40):       (
[ 388]identifier:         row
[ 388]delimiter:          ,
[ 388]identifier:         borderSearchStart
[ 388]operator(41):       )
[ 388]delimiter:          ;
[ 389]identifier:         borderSearchStart
[ 389]operator(61):       =
[ 389]operator(40):       (
[ 389]identifier:         resultSet
[ 389]operator(46):       .
[ 389]identifier:         rightBorder
[ 389]delimiter:          [
[ 389]identifier:         row
[ 389]delimiter:          ]
[ 389]operator(43):       +
[ 389]identifier:         resultSet
[ 389]operator(46):       .
[ 389]identifier:         leftBorder
[ 389]delimiter:          [
[ 389]identifier:         row
[ 389]delimiter:          ]
[ 389]operator(41):       )
[ 389]operator(47):       /
[ 389]constant:           2
[ 389]delimiter:          ;
[ 390]delimiter:          }
[ 391]delimiter:          }
[ 393]reserved word(16):  int
[ 393]identifier:         compensateEnd
[ 393]operator(61):       =
[ 393]identifier:         Max
[ 393]operator(40):       (
[ 393]identifier:         leftCompensateEnd
[ 393]delimiter:          ,
[ 393]identifier:         rightCompensateEnd
[ 393]operator(41):       )
[ 393]delimiter:          ;
[ 395]identifier:         borderSearchStart
[ 395]operator(61):       =
[ 395]operator(40):       (
[ 395]identifier:         resultSet
[ 395]operator(46):       .
[ 395]identifier:         leftBorder
[ 395]delimiter:          [
[ 395]identifier:         compensateEnd
[ 395]operator(45):       -
[ 395]constant:           1
[ 395]delimiter:          ]
[ 395]operator(43):       +
[ 395]identifier:         resultSet
[ 395]operator(46):       .
[ 395]identifier:         rightBorder
[ 395]delimiter:          [
[ 395]identifier:         compensateEnd
[ 395]operator(45):       -
[ 395]constant:           1
[ 395]delimiter:          ]
[ 395]operator(41):       )
[ 395]operator(47):       /
[ 395]constant:           2
[ 395]delimiter:          ;
[ 396]reserved word(13):  for
[ 396]operator(40):       (
[ 396]reserved word(16):  int
[ 396]identifier:         row
[ 396]operator(61):       =
[ 396]identifier:         compensateEnd
[ 396]delimiter:          ;
[ 396]identifier:         row
[ 396]operator(60):       <
[ 396]identifier:         IMG_ROW
[ 396]delimiter:          ;
[ 396]operator(86):       ++
[ 396]identifier:         row
[ 396]operator(41):       )
[ 397]delimiter:          {
[ 398]identifier:         LeftBorderSearchFrom
[ 398]operator(40):       (
[ 398]identifier:         row
[ 398]delimiter:          ,
[ 398]identifier:         borderSearchStart
[ 398]operator(41):       )
[ 398]delimiter:          ;
[ 399]identifier:         RightBorderSearchFrom
[ 399]operator(40):       (
[ 399]identifier:         row
[ 399]delimiter:          ,
[ 399]identifier:         borderSearchStart
[ 399]operator(41):       )
[ 399]delimiter:          ;
[ 400]reserved word(15):  if
[ 400]operator(40):       (
[ 400]identifier:         Abs
[ 400]operator(40):       (
[ 400]operator(40):       (
[ 400]identifier:         resultSet
[ 400]operator(46):       .
[ 400]identifier:         rightBorder
[ 400]delimiter:          [
[ 400]identifier:         row
[ 400]delimiter:          ]
[ 400]operator(43):       +
[ 400]identifier:         resultSet
[ 400]operator(46):       .
[ 400]identifier:         leftBorder
[ 400]delimiter:          [
[ 400]identifier:         row
[ 400]delimiter:          ]
[ 400]operator(41):       )
[ 401]operator(45):       -
[ 401]operator(40):       (
[ 401]identifier:         resultSet
[ 401]operator(46):       .
[ 401]identifier:         rightBorder
[ 401]delimiter:          [
[ 401]identifier:         row
[ 401]operator(45):       -
[ 401]constant:           1
[ 401]delimiter:          ]
[ 401]operator(43):       +
[ 401]identifier:         resultSet
[ 401]operator(46):       .
[ 401]identifier:         leftBorder
[ 401]delimiter:          [
[ 401]identifier:         row
[ 401]operator(45):       -
[ 401]constant:           1
[ 401]delimiter:          ]
[ 401]operator(41):       )
[ 401]operator(41):       )
[ 401]operator(60):       <
[ 401]constant:           10
[ 401]operator(41):       )
[ 402]delimiter:          {
[ 403]identifier:         borderSearchStart
[ 403]operator(61):       =
[ 403]operator(40):       (
[ 403]identifier:         resultSet
[ 403]operator(46):       .
[ 403]identifier:         rightBorder
[ 403]delimiter:          [
[ 403]identifier:         row
[ 403]delimiter:          ]
[ 403]operator(43):       +
[ 403]identifier:         resultSet
[ 403]operator(46):       .
[ 403]identifier:         leftBorder
[ 403]delimiter:          [
[ 403]identifier:         row
[ 403]delimiter:          ]
[ 403]operator(41):       )
[ 403]operator(47):       /
[ 403]constant:           2
[ 403]delimiter:          ;
[ 404]delimiter:          }
[ 405]delimiter:          }
[ 407]identifier:         MiddleLineUpdateAll
[ 407]operator(40):       (
[ 407]operator(41):       )
[ 407]delimiter:          ;
[ 408]delimiter:          }
[ 410]identifier:         int16_t
[ 410]identifier:         CrossRoadCompensateOneSide
[ 410]operator(40):       (
[ 410]identifier:         int16_t
[ 410]identifier:         borders
[ 410]delimiter:          [
[ 410]identifier:         IMG_ROW
[ 410]delimiter:          ]
[ 410]delimiter:          ,
[ 410]identifier:         int16_t
[ 410]identifier:         slopes
[ 410]delimiter:          [
[ 410]identifier:         IMG_ROW
[ 410]delimiter:          ]
[ 410]delimiter:          ,
[ 410]identifier:         int16_t
[ 410]identifier:         zeros
[ 410]delimiter:          [
[ 410]identifier:         IMG_ROW
[ 410]delimiter:          ]
[ 410]operator(41):       )
[ 410]delimiter:          {
[ 411]reserved word(16):  int
[ 411]identifier:         compensateEnd
[ 411]operator(61):       =
[ 411]identifier:         IMG_ROW
[ 411]delimiter:          ;
[ 412]reserved word(16):  int
[ 412]identifier:         row
[ 412]operator(61):       =
[ 412]constant:           6
[ 412]delimiter:          ;
[ 413]reserved word(31):  while
[ 413]operator(40):       (
[ 413]identifier:         row
[ 413]operator(60):       <
[ 413]identifier:         IMG_ROW
[ 413]operator(76):       &&
[ 413]identifier:         borders
[ 413]delimiter:          [
[ 413]identifier:         row
[ 413]delimiter:          ]
[ 413]operator(94):       !=
[ 413]constant:           0
[ 414]operator(76):       &&
[ 414]identifier:         Abs
[ 414]operator(40):       (
[ 414]identifier:         slopes
[ 414]delimiter:          [
[ 414]identifier:         row
[ 414]delimiter:          ]
[ 414]operator(45):       -
[ 414]identifier:         slopes
[ 414]delimiter:          [
[ 414]identifier:         row
[ 414]operator(45):       -
[ 414]constant:           1
[ 414]delimiter:          ]
[ 414]operator(41):       )
[ 414]operator(60):       <
[ 414]constant:           3
[ 415]operator(76):       &&
[ 415]operator(33):       !
[ 415]identifier:         OpstSign
[ 415]operator(40):       (
[ 415]identifier:         slopes
[ 415]delimiter:          [
[ 415]identifier:         row
[ 415]delimiter:          ]
[ 415]delimiter:          ,
[ 415]identifier:         slopes
[ 415]delimiter:          [
[ 415]identifier:         row
[ 415]operator(45):       -
[ 415]constant:           1
[ 415]delimiter:          ]
[ 415]operator(41):       )
[ 415]operator(41):       )
[ 415]delimiter:          {
[ 415]operator(86):       ++
[ 415]identifier:         row
[ 415]delimiter:          ;
[ 415]delimiter:          }
[ 416]identifier:         int16_t
[ 416]identifier:         _row
[ 416]operator(61):       =
[ 416]identifier:         row
[ 416]delimiter:          ;
[ 417]reserved word(13):  for
[ 417]operator(40):       (
[ 417]delimiter:          ;
[ 417]identifier:         row
[ 417]operator(60):       <
[ 417]identifier:         compensateEnd
[ 417]delimiter:          ;
[ 417]operator(86):       ++
[ 417]identifier:         row
[ 417]operator(41):       )
[ 418]delimiter:          {
[ 419]identifier:         borders
[ 419]delimiter:          [
[ 419]identifier:         row
[ 419]delimiter:          ]
[ 419]operator(61):       =
[ 419]identifier:         row
[ 419]operator(42):       *
[ 419]identifier:         slopes
[ 419]delimiter:          [
[ 419]identifier:         compensateEnd
[ 419]operator(45):       -
[ 419]constant:           5
[ 419]delimiter:          ]
[ 419]operator(43):       +
[ 419]identifier:         zeros
[ 419]delimiter:          [
[ 419]identifier:         compensateEnd
[ 419]operator(45):       -
[ 419]constant:           5
[ 419]delimiter:          ]
[ 419]delimiter:          ;
[ 420]reserved word(15):  if
[ 420]operator(40):       (
[ 420]identifier:         IsBlack
[ 420]operator(40):       (
[ 420]identifier:         row
[ 420]delimiter:          ,
[ 420]identifier:         borders
[ 420]delimiter:          [
[ 420]identifier:         row
[ 420]delimiter:          ]
[ 420]operator(41):       )
[ 420]operator(41):       )
[ 421]delimiter:          {
[ 422]identifier:         compensateEnd
[ 422]operator(61):       =
[ 422]identifier:         row
[ 422]delimiter:          ;
[ 423]reserved word( 1):  break
[ 423]delimiter:          ;
[ 424]delimiter:          }
[ 425]delimiter:          }
[ 426]reserved word(19):  return
[ 426]identifier:         compensateEnd
[ 426]delimiter:          ;
[ 427]delimiter:          }
[ 429]reserved word(33):  bool
[ 429]identifier:         StartLineJudge
[ 429]operator(40):       (
[ 429]identifier:         int16_t
[ 429]identifier:         row
[ 429]operator(41):       )
[ 429]delimiter:          {
[ 430]identifier:         int16_t
[ 430]identifier:         toggleCnt
[ 430]operator(61):       =
[ 430]constant:           0
[ 430]delimiter:          ;
[ 431]identifier:         int16_t
[ 431]identifier:         patternRowCnt
[ 431]operator(61):       =
[ 431]constant:           0
[ 431]delimiter:          ;
[ 432]reserved word(13):  for
[ 432]operator(40):       (
[ 432]identifier:         int16_t
[ 432]identifier:         i
[ 432]operator(61):       =
[ 432]identifier:         row
[ 432]delimiter:          ;
[ 432]identifier:         i
[ 432]operator(123):       >=
[ 432]identifier:         row
[ 432]operator(45):       -
[ 432]constant:           6
[ 432]delimiter:          ;
[ 432]operator(90):       --
[ 432]identifier:         i
[ 432]operator(41):       )
[ 432]delimiter:          {
[ 433]reserved word(13):  for
[ 433]operator(40):       (
[ 433]identifier:         int16_t
[ 433]identifier:         j
[ 433]operator(61):       =
[ 433]identifier:         IMG_COL
[ 433]operator(47):       /
[ 433]constant:           2
[ 433]delimiter:          ;
[ 433]identifier:         j
[ 433]operator(123):       >=
[ 433]constant:           0
[ 433]delimiter:          ;
[ 433]operator(90):       --
[ 433]identifier:         j
[ 433]operator(41):       )
[ 433]delimiter:          {
[ 434]reserved word(15):  if
[ 434]operator(40):       (
[ 434]identifier:         TstImgBufAsBitMap
[ 434]operator(40):       (
[ 434]identifier:         i
[ 434]delimiter:          ,
[ 434]identifier:         j
[ 434]operator(41):       )
[ 434]operator(94):       !=
[ 434]identifier:         TstImgBufAsBitMap
[ 434]operator(40):       (
[ 434]identifier:         i
[ 434]delimiter:          ,
[ 434]identifier:         j
[ 434]operator(43):       +
[ 434]constant:           1
[ 434]operator(41):       )
[ 434]operator(41):       )
[ 434]delimiter:          {
[ 435]reserved word(15):  if
[ 435]operator(40):       (
[ 435]identifier:         toggleCnt
[ 435]operator(62):       >
[ 435]constant:           14
[ 435]operator(41):       )
[ 435]delimiter:          {
[ 436]identifier:         toggleCnt
[ 436]operator(61):       =
[ 436]constant:           0
[ 436]delimiter:          ;
[ 437]operator(86):       ++
[ 437]identifier:         patternRowCnt
[ 437]delimiter:          ;
[ 438]reserved word(15):  if
[ 438]operator(40):       (
[ 438]identifier:         patternRowCnt
[ 438]operator(62):       >
[ 438]constant:           4
[ 438]operator(41):       )
[ 438]delimiter:          {
[ 439]reserved word(19):  return
[ 439]constant:           true
[ 439]delimiter:          ;
[ 440]delimiter:          }
[ 440]reserved word( 9):  else
[ 440]delimiter:          {
[ 441]reserved word( 1):  break
[ 441]delimiter:          ;
[ 442]delimiter:          }
[ 443]delimiter:          }
[ 443]reserved word( 9):  else
[ 443]delimiter:          {
[ 444]operator(86):       ++
[ 444]identifier:         toggleCnt
[ 444]delimiter:          ;
[ 445]delimiter:          }
[ 446]delimiter:          }
[ 447]delimiter:          }
[ 448]delimiter:          }
[ 449]reserved word(19):  return
[ 449]constant:           false
[ 449]delimiter:          ;
[ 450]delimiter:          }
[ 452]reserved word(33):  bool
[ 452]identifier:         StraightLineJudge
[ 452]operator(40):       (
[ 452]reserved word(29):  void
[ 452]operator(41):       )
[ 452]delimiter:          {
[ 453]identifier:         int16_t
[ 453]identifier:         middleAreaCnt
[ 453]operator(61):       =
[ 453]constant:           0
[ 453]delimiter:          ;
[ 454]reserved word(13):  for
[ 454]operator(40):       (
[ 454]identifier:         int16_t
[ 454]identifier:         i
[ 454]operator(61):       =
[ 454]constant:           0
[ 454]delimiter:          ;
[ 454]identifier:         i
[ 454]operator(60):       <
[ 454]identifier:         IMG_ROW
[ 454]delimiter:          ;
[ 454]operator(86):       ++
[ 454]identifier:         i
[ 454]operator(41):       )
[ 454]delimiter:          {
[ 455]reserved word(15):  if
[ 455]operator(40):       (
[ 455]identifier:         InRange
[ 455]operator(40):       (
[ 455]identifier:         resultSet
[ 455]operator(46):       .
[ 455]identifier:         middleLine
[ 455]delimiter:          [
[ 455]identifier:         i
[ 455]delimiter:          ]
[ 455]delimiter:          ,
[ 455]identifier:         IMG_COL
[ 455]operator(47):       /
[ 455]constant:           2
[ 455]operator(45):       -
[ 455]constant:           10
[ 455]delimiter:          ,
[ 455]identifier:         IMG_COL
[ 455]operator(47):       /
[ 455]constant:           2
[ 455]operator(43):       +
[ 455]constant:           10
[ 455]operator(41):       )
[ 455]operator(41):       )
[ 455]delimiter:          {
[ 456]identifier:         middleAreaCnt
[ 456]operator(86):       ++
[ 456]delimiter:          ;
[ 457]delimiter:          }
[ 458]delimiter:          }
[ 459]reserved word(19):  return
[ 459]identifier:         middleAreaCnt
[ 459]operator(62):       >
[ 459]constant:           38
[ 459]delimiter:          ;
[ 460]delimiter:          }
[ 462]reserved word(32):  inline
[ 462]reserved word(12):  float
[ 462]identifier:         Abs
[ 462]operator(40):       (
[ 462]reserved word(12):  float
[ 462]identifier:         input
[ 462]operator(41):       )
[ 462]delimiter:          {
[ 463]reserved word(19):  return
[ 463]identifier:         input
[ 463]operator(123):       >=
[ 463]constant:           0
[ 463]operator(63):       ?
[ 463]identifier:         input
[ 463]operator(58):       :
[ 463]operator(45):       -
[ 463]identifier:         input
[ 463]delimiter:          ;
[ 464]delimiter:          }
[ 466]reserved word(32):  inline
[ 466]reserved word(12):  float
[ 466]identifier:         Min
[ 466]operator(40):       (
[ 466]reserved word(12):  float
[ 466]identifier:         a
[ 466]delimiter:          ,
[ 466]reserved word(12):  float
[ 466]identifier:         b
[ 466]operator(41):       )
[ 466]delimiter:          {
[ 467]reserved word(19):  return
[ 467]identifier:         a
[ 467]operator(62):       >
[ 467]identifier:         b
[ 467]operator(63):       ?
[ 467]identifier:         b
[ 467]operator(58):       :
[ 467]identifier:         a
[ 467]delimiter:          ;
[ 468]delimiter:          }
[ 470]reserved word(32):  inline
[ 470]reserved word(12):  float
[ 470]identifier:         Max
[ 470]operator(40):       (
[ 470]reserved word(12):  float
[ 470]identifier:         a
[ 470]delimiter:          ,
[ 470]reserved word(12):  float
[ 470]identifier:         b
[ 470]operator(41):       )
[ 470]delimiter:          {
[ 471]reserved word(19):  return
[ 471]identifier:         a
[ 471]operator(62):       >
[ 471]identifier:         b
[ 471]operator(63):       ?
[ 471]identifier:         a
[ 471]operator(58):       :
[ 471]identifier:         b
[ 471]delimiter:          ;
[ 472]delimiter:          }
[ 474]reserved word(32):  inline
[ 474]reserved word(33):  bool
[ 474]identifier:         OpstSign
[ 474]operator(40):       (
[ 474]identifier:         int16_t
[ 474]identifier:         a
[ 474]delimiter:          ,
[ 474]identifier:         int16_t
[ 474]identifier:         b
[ 474]operator(41):       )
[ 474]delimiter:          {
[ 475]reserved word(19):  return
[ 475]operator(40):       (
[ 475]identifier:         a
[ 475]operator(38):       &
[ 475]constant:           0x8000
[ 475]operator(41):       )
[ 475]operator(94):       ^
[ 475]operator(40):       (
[ 475]identifier:         b
[ 475]operator(38):       &
[ 475]constant:           0x8000
[ 475]operator(41):       )
[ 475]delimiter:          ;
[ 476]delimiter:          }
[ 478]reserved word(32):  inline
[ 478]reserved word(33):  bool
[ 478]identifier:         InRange
[ 478]operator(40):       (
[ 478]identifier:         int16_t
[ 478]identifier:         value
[ 478]delimiter:          ,
[ 478]identifier:         int16_t
[ 478]identifier:         lbound
[ 478]delimiter:          ,
[ 478]identifier:         int16_t
[ 478]identifier:         hbound
[ 478]operator(41):       )
[ 478]delimiter:          {
[ 479]reserved word(19):  return
[ 479]identifier:         value
[ 479]operator(62):       >
[ 479]identifier:         lbound
[ 479]operator(76):       &&
[ 479]identifier:         value
[ 479]operator(60):       <
[ 479]identifier:         hbound
[ 479]delimiter:          ;
[ 480]delimiter:          }


